// Generated by Dagger (https://google.github.io/dagger).
package com.ctech.messenger.viewmodel;

import com.ctech.messenger.repository.MessageRepository;
import com.ctech.messenger.utils.ThreadScheduler;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class ChatViewModel_Factory implements Factory<ChatViewModel> {
  private final Provider<MessageRepository> repositoryProvider;

  private final Provider<ThreadScheduler> threadSchedulerProvider;

  public ChatViewModel_Factory(
      Provider<MessageRepository> repositoryProvider,
      Provider<ThreadScheduler> threadSchedulerProvider) {
    this.repositoryProvider = repositoryProvider;
    this.threadSchedulerProvider = threadSchedulerProvider;
  }

  @Override
  public ChatViewModel get() {
    return provideInstance(repositoryProvider, threadSchedulerProvider);
  }

  public static ChatViewModel provideInstance(
      Provider<MessageRepository> repositoryProvider,
      Provider<ThreadScheduler> threadSchedulerProvider) {
    return new ChatViewModel(repositoryProvider.get(), threadSchedulerProvider.get());
  }

  public static ChatViewModel_Factory create(
      Provider<MessageRepository> repositoryProvider,
      Provider<ThreadScheduler> threadSchedulerProvider) {
    return new ChatViewModel_Factory(repositoryProvider, threadSchedulerProvider);
  }

  public static ChatViewModel newChatViewModel(
      MessageRepository repository, ThreadScheduler threadScheduler) {
    return new ChatViewModel(repository, threadScheduler);
  }
}
