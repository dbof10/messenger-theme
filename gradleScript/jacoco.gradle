apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.0"
}

project.afterEvaluate {
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')
    def tasks = []

    // Create test coverage task for each of productFlavorName
    productFlavors.each { productFlavorName ->

        // Create a task base on taskName and sourcePath
        def createTask = { testTaskName, sourcePath ->
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "coverage"
                classDirectories = fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: [
                                '**/R.class',
                                '**/R$*.class',
                                '**/*$ViewInjector*.*',
                                '**/*$ViewBinder*.*',
                                '**/BuildConfig.*',
                                '**/*Application*.*',
                                '**/*Component*.*',
                                '**/*Adapter*.*',
                                '**/*Fragment*.*',
                                '**/*Activity*.*',
                                '**/*_Factory*.*',
                                '**/*ViewHolder*.*',
                                '**/Manifest*.*',
                                '**/*$Lambda$*.*',
                                '**/*Module.*',
                                '**/*Dagger*.*',
                                '**/*MembersInjector*.*',
                                '**/*_Provide*Factory*.*'
                        ]
                )
                def coverageSourceDirs = [
                        "src/main/java"
                ]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                reports {
                    xml.enabled = true
                    xml.destination "${buildDir}/reports/jacoco/${testTaskName}Coverage/report.xml"
                    html.enabled = true
                }
            }
        }

        // Create test coverage task for each of buildType
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            createTask(testTaskName, sourcePath)
            tasks.add("${testTaskName}Coverage")
        }

//        // Create testCoverageTasks
//        task "testCoverage" {
//            group = "coverage"
//            tasks.each { taskName ->
//                dependsOn taskName
//            }
//        }
    }
}
